
        import java.awt.Color;
        import java.awt.event.MouseAdapter;
        import java.awt.event.MouseEvent;
        import java.awt.event.MouseListener;
        import java.io.File;
        import java.io.FileNotFoundException;
        import java.io.IOException;
        import java.io.ObjectInputStream;
        import java.io.ObjectOutputStream;
        import java.net.DatagramPacket;
        import java.net.DatagramSocket;
        import java.net.InetAddress;
        import java.net.InetSocketAddress;
        import java.net.ServerSocket;
        import java.net.Socket;
        import java.net.SocketException;
        import java.sql.Timestamp;
        import java.util.ArrayList;
        import java.util.Scanner;
        import java.util.logging.Level;
        import java.util.logging.Logger;
        import javax.swing.DefaultListModel;
        import javax.swing.JOptionPane;
        import javax.swing.JTextPane;
        import javax.swing.text.AttributeSet;
        import javax.swing.text.SimpleAttributeSet;
        import javax.swing.text.StyleConstants;
        import javax.swing.text.StyleContext;
        import java.util.HashMap;
        import java.util.Map;

        public class chat extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form chat
     */

    public Channel channel = new Channel();
    public InetSocketAddress address ;
    public int index=-1;
    public String s;
    public String name;
    DefaultListModel<String> model = new DefaultListModel<>();
    public chat()  {
        initComponents();
        jButtonsend.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonsend = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea_messege = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField_sorce_port = new javax.swing.JTextField();
        jTextField_dest_ip = new javax.swing.JTextField();
        jTextField_dest_port = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField_status = new javax.swing.JTextField();
        jTextField_name = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField_sorce_ip = new javax.swing.JTextField();
        jButtontest = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButtonlogIn = new javax.swing.JButton();
        jButtonlogout = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField_Serverport = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton1_sendToAll = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setSize(new java.awt.Dimension(800, 500));

        jButtonsend.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButtonsend.setForeground(new java.awt.Color(51, 153, 0));
        jButtonsend.setText("Send ");
        jButtonsend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonsendActionPerformed(evt);
            }
        });

        jTextArea_messege.setColumns(20);
        jTextArea_messege.setRows(5);
        jTextArea_messege.setText("Enter massege");
        jTextArea_messege.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextArea_messegeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextArea_messegeFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea_messege);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Available Interface");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "intet face 127.0.0.1", "intet face 127.0.0.1" }));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Local IP:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Local Port:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Remote IP:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Remote Port :");

        jTextField_dest_ip.setText("127.0.0.1");
        jTextField_dest_ip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_dest_ipActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Status : ");

        jTextField_status.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextField_status.setEnabled(false);

        jTextField_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_nameActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Username:");

        jTextField_sorce_ip.setText("127.0.0.1");
        jTextField_sorce_ip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_sorce_ipActionPerformed(evt);
            }
        });

        jButtontest.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButtontest.setForeground(new java.awt.Color(51, 153, 0));
        jButtontest.setText("Test Connection");
        jButtontest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtontestActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jTextPane1);

        jScrollPane1.setViewportView(jList1);

        jButtonlogIn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButtonlogIn.setForeground(new java.awt.Color(51, 153, 0));
        jButtonlogIn.setText("Login");
        jButtonlogIn.setActionCommand("");
        jButtonlogIn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 51)));
        jButtonlogIn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonlogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonlogInActionPerformed(evt);
            }
        });

        jButtonlogout.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButtonlogout.setForeground(new java.awt.Color(255, 51, 51));
        jButtonlogout.setText("Logout");
        jButtonlogout.setToolTipText("");
        jButtonlogout.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));
        jButtonlogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonlogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonlogoutActionPerformed(evt);
            }
        });

        jTextField_Serverport.setText("9876");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("TCP Server IP ");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText("TCP Server Port ");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel10.setText("Online users: ");

        jButton1_sendToAll.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1_sendToAll.setForeground(new java.awt.Color(51, 153, 0));
        jButton1_sendToAll.setText("Send to all");
        jButton1_sendToAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_sendToAllActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText("Password:");

        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(38, 38, 38))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addGap(10, 10, 10)
                                                .addComponent(jTextField_status)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jButtonsend, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addGap(18, 18, 18)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                        .addComponent(jTextField_sorce_port)
                                                                                        .addComponent(jTextField_dest_ip)
                                                                                        .addComponent(jTextField_dest_port)
                                                                                        .addComponent(jTextField_sorce_ip)
                                                                                        .addComponent(jButtontest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(94, 94, 94)
                                                                                .addComponent(jButton1_sendToAll, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel8)
                                                                        .addComponent(jLabel9))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jTextField_Serverport, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                                                        .addComponent(jTextField1)))
                                                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(18, 18, 18))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButtonlogIn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButtonlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(177, 177, 177)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jButtonlogIn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jButtonlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel7)
                                                .addComponent(jLabel11)
                                                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel10))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane3)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel8)
                                                                .addGap(0, 0, Short.MAX_VALUE)))
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(7, 7, 7))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jTextField_Serverport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel9))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(6, 6, 6)
                                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(14, 14, 14)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(1, 1, 1)
                                                                                .addComponent(jLabel1))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jTextField_sorce_ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(7, 7, 7)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jTextField_sorce_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel3))
                                                                                .addGap(11, 11, 11)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jTextField_dest_ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel4))
                                                                                .addGap(11, 11, 11)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jTextField_dest_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel5))))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jButtontest, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jButtonsend, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                                                .addComponent(jButton1_sendToAll, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jScrollPane1))
                                                .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(8, 8, 8)
                                                .addComponent(jLabel6))
                                        .addComponent(jTextField_status, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_nameActionPerformed

    private void jTextField_sorce_ipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_sorce_ipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_sorce_ipActionPerformed

    private void jButtonsendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonsendActionPerformed
        // TODO add your handling code here:

        String destinationIP ="";
        int destinationPort =0;
        destinationIP = jTextField_dest_ip.getText();
        destinationPort = Integer.parseInt(jTextField_dest_port.getText());
        address = new InetSocketAddress(destinationIP, destinationPort);

        String msg = jTextArea_messege.getText();
        jTextArea_messege.setText("");
        if( !msg.isEmpty()){
            Timestamp timestamp = new Timestamp(System.currentTimeMillis());

            msg = name + ": " + msg + "\t" +timestamp;


            try {
                channel.sendTo(address, msg);
            } catch (IOException ex) {
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println(msg);
            index++;

            if(msg.contains("Ali")){
                appendToPane(index,jTextPane1,msg +"\n", Color.BLUE);
            }
            if(msg.contains("Saly")){
                appendToPane(index,jTextPane1,msg +"\n",Color.PINK);
            }
            if(msg.contains("Aws")){
                appendToPane(index,jTextPane1,msg +"\n",Color.ORANGE);
            }
            if(msg.contains("Adam")){
                appendToPane(index,jTextPane1,msg +"\n",Color.MAGENTA);
            }


        }
        //channel.stop();

    }//GEN-LAST:event_jButtonsendActionPerformed
    private void appendToPane(int index,JTextPane tp, String msg, Color c)
    {
        if(msg.contains("delete")){
            index=0;
            jScrollPane3.setViewportView(null); // remove the JTextPane from the JScrollPane
            jTextPane1.setText("");
            jScrollPane3.setViewportView(jTextPane1);


        }
        else{
            StyleContext sc = StyleContext.getDefaultStyleContext();
            AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

            aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
            aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

            int len = tp.getDocument().getLength();
            tp.setCaretPosition(len);
            tp.setCharacterAttributes(aset, false);
            s=index+""+msg;
            tp.replaceSelection(s);
        }

    }
    private void jButtontestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtontestActionPerformed
        if(jTextField_sorce_port.getText().equals("")|| jTextField_sorce_ip.getText().equals("") )
            JOptionPane.showMessageDialog(this, " Enter Source Address ");
        else {
            int sourcePort =0;



            try {
                name = jTextField_name.getText();
                String K=jTextField_name.getText()+" "+jTextField_sorce_ip.getText()+" "+jTextField_sorce_port.getText();
                sourcePort = Integer.parseInt(jTextField_sorce_port.getText());



                channel.bind(sourcePort);
                channel.start();

                jTextField_status.setText(K);

            } catch (SocketException ex) {
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtontestActionPerformed

    private void jTextArea_messegeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea_messegeFocusGained

        if(jTextArea_messege.getText().trim().equals("Enter your massege"))
            jTextArea_messege.setText("");

    }//GEN-LAST:event_jTextArea_messegeFocusGained

    private void jTextArea_messegeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea_messegeFocusLost
        if(jTextArea_messege.getText().trim().equals(""))
            jTextArea_messege.setText("Enter your massege");
    }//GEN-LAST:event_jTextArea_messegeFocusLost
    boolean login =false;
    private void jButtonlogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonlogInActionPerformed

        if(jTextField_name.getText().equals("")|| jTextField_sorce_ip.getText().equals("") )
            JOptionPane.showMessageDialog(this, " Enter your username and source ip");
        else{
            try {
                if(checkuser(jTextField_name.getText(),jPasswordField1.getPassword())==1){
                    login=true;
                }
                if(login){
                    InetAddress host;

                    host = InetAddress.getLocalHost();

                    Socket socket = null;
                    ObjectOutputStream oos = null;
                    ObjectInputStream ois = null;


                    //establish socket connection to server
                    socket = new Socket(host.getHostName(), Integer.valueOf(jTextField_Serverport.getText()));
                    //write to socket using ObjectOutputStream
                    oos = new ObjectOutputStream(socket.getOutputStream());
                    System.out.println("Sending request to Socket Server");
                    // if(i==4)oos.writeObject("exit");
                    oos.writeObject( "login"+ jTextField_sorce_ip.getText() +":"+ jTextField_sorce_port.getText() + ":" + jTextField_name.getText());
                    //read the server response message
                    ois = new ObjectInputStream(socket.getInputStream());
                    // String message;

                    model =  (DefaultListModel<String>) ois.readObject();
                    // login = true;
                    //  System.out.println("Message: " + message);
                    jList1.setModel(model);
                    //close resources
                    ois.close();
                    oos.close();
                    Thread.sleep(100);}
                else{
                    JOptionPane.showMessageDialog(this, "cannot log in, either user name or password incorrect");
                }

            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(this, ex);
                login = false;
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }catch (IOException ex) {
                login = false;
                JOptionPane.showMessageDialog(this, ex);
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }catch (ClassNotFoundException ex) {
                login = false;
                JOptionPane.showMessageDialog(this, ex);
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(login){
                jButtonlogIn.setEnabled(false);
                jButtonsend.setEnabled(true);}
            new Thread() {
                @Override
                public void run() {

                    try {
                        ServerSocket server;
                        //socket server port on which it will listen
                        int port = Integer.valueOf(jTextField_sorce_port.getText());
                        server = new ServerSocket(port);
                        //keep listens indefinitely until receives 'exit' call or program terminates
                        while(true){
                            System.out.println("Waiting for the client request");
                            //creating socket and waiting for client connection
                            Socket socket = server.accept();
                            //read from socket to ObjectInputStream object
                            ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
                            //convert ObjectInputStream object to String
                            // String message;

                            model =  (DefaultListModel<String>) ois.readObject();
                            jList1.setModel(model);

                            ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
                            oos.writeObject(model);

                            ois.close();
                            oos.close();
                            socket.close();

                        }


                    } catch (IOException ex) {
                        Logger.getLogger(Tcp_Server.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, ex);
                    }
                    catch (ClassNotFoundException ex) {
                        Logger.getLogger(Tcp_Server.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, ex);
                    }

                    catch (Exception ex) {

                        Logger.getLogger(Tcp_Server.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, ex);
                    }

                }
            }.start();

// };
//});
            jList1.addMouseListener(mouseListener);
        }

    }//GEN-LAST:event_jButtonlogInActionPerformed

    MouseListener mouseListener = new MouseAdapter() {

        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {

                System.out.println(".mouseClicked()");
                String[] stringarry = jList1.getSelectedValue().split(":");

                jTextField_dest_ip.setText(stringarry[0]);
                jTextField_dest_port.setText(stringarry[1]);

            }
        }
    };

    private void jButtonlogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonlogoutActionPerformed
        try {
            InetAddress host;

            host = InetAddress.getLocalHost();

            Socket socket = null;
            ObjectOutputStream oos = null;
            ObjectInputStream ois = null;



            //establish socket connection to server
            socket = new Socket(host.getHostName(), Integer.valueOf(jTextField_Serverport.getText()));

            //write to socket using ObjectOutputStream
            oos = new ObjectOutputStream(socket.getOutputStream());
            System.out.println("Sending request to Socket Server");
            // if(i==4)oos.writeObject("exit");
            oos.writeObject( "logout"+jTextField_sorce_ip.getText() +":"+ jTextField_sorce_port.getText() + ":" + jTextField_name.getText());
            //read the server response message
            ois = new ObjectInputStream(socket.getInputStream());
            String message ="";

            model =  (DefaultListModel<String>) ois.readObject();
            login = true;
            System.out.println("Message: " + message);
            //close resources
            ois.close();
            oos.close();
            Thread.sleep(100);

        } catch (InterruptedException ex) {
            Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
        }catch (IOException ex) {
            Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
        }catch (ClassNotFoundException ex) {
            Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
        }
        model.clear();
        jList1.setModel(model);

        login= true;
        jButtonsend.setEnabled(false);
        jButtonlogIn.setEnabled(login);
        jButtonlogout.setEnabled(false);

//channel.stop();
    }//GEN-LAST:event_jButtonlogoutActionPerformed

    private void jButton1_sendToAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_sendToAllActionPerformed
        if(login){
            name = jTextField_name.getText();

            int sourcePort =0;
            sourcePort = Integer.parseInt(jTextField_sorce_port.getText());
      /*  try {
            channel.bind(sourcePort);
            channel.start();
        } catch (IOException ex) {
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
        }*/
            String msg = jTextArea_messege.getText();
            Timestamp timestamp = new Timestamp(System.currentTimeMillis());
            msg = name + ": " + msg + "\t" +timestamp;
            jTextArea_messege.setText("");

            index++;

            if(msg.contains("Ali")){
                appendToPane(index,jTextPane1,msg +"\n",Color.BLUE);
            }
            if(msg.contains("Saly")){
                appendToPane(index,jTextPane1,msg +"\n",Color.PINK);
            }
            if(msg.contains("Aws")){
                appendToPane(index,jTextPane1,msg +"\n",Color.ORANGE);
            }
            if(msg.contains("Adam")){
                appendToPane(index,jTextPane1,msg +"\n",Color.MAGENTA);
            }

            for(int i=0;i<model.getSize();i++) {

                System.out.println(i);
                String sp []= model.get(i).split(":");

                if( !msg.isEmpty()){

                    try {

                        String destinationIP = sp[0];
                        int destinationPort = Integer.parseInt(sp[1]);
                        if (sourcePort == destinationPort)
                            continue;
                        address = new InetSocketAddress(destinationIP, destinationPort);
                        System.out.println("after address");
                        channel.sendTo(address, msg);
                        System.out.println("after sendto");

                        //channel.stop();
                    } catch (IOException ex) {
                        Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println(msg);
                }
            }}
        else{
            JOptionPane.showMessageDialog(this, "cannot send massage because you are not logged in");
        }
    }//GEN-LAST:event_jButton1_sendToAllActionPerformed

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    private void jTextField_dest_ipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_dest_ipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_dest_ipActionPerformed

    /**
     * @param args the command line arguments
     */

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chat().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private int checkuser(String text, char[] password) {
        int result=0;
        String separator = ",";
        int rowWidth = 2;
        ArrayList<String> col0 = new ArrayList<String>();
        ArrayList<String> col1 = new ArrayList<String>();
        Map<Integer, ArrayList<String>> columns = new HashMap<Integer, ArrayList<String>>();
        columns.put(0, col0);
        columns.put(1, col1);
        File file = new File("chat.txt");
        try {
            Scanner input = new Scanner(file);
            while (input.hasNextLine()) {
                String[] line = input.nextLine().trim().replaceAll(separator, ",").split(separator);
                for (int i = 0; i < rowWidth; i++) {
                    if (line[i] == null) {
                        columns.get(Integer.valueOf(i)).add("null");
                    } else {
                        columns.get(Integer.valueOf(i)).add(line[i]);
                    }
                }
            }
            ArrayList<String>Col0=columns.get(0);
            ArrayList<String>Col1=columns.get(1);
            for(int i=0;i<Col0.size();i++) {
                if(text.equals(Col0.get(i))&& new String(password).equals(Col1.get(i))) {
                    result=1;
                }
            }
            input.close();
        } catch (FileNotFoundException x) {
            System.out.println(x.getMessage());
        }

        return result;
    }
    public class Channel implements Runnable
    {
        private DatagramSocket socket;
        private boolean running;
        String msg = "a";
        public void bind(int port) throws SocketException
        {
            socket = new DatagramSocket(port);
        }

        public void start()
        {
            Thread thread = new Thread(this);
            thread.start();
        }

        public void stop()
        {
            running = false;
            socket.close();
        }

        @Override
        public void run()
        {
            byte[] buffer = new byte[1024];
            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);

            running = true;
            while(running)
            {
                try
                {
                    socket.receive(packet);

                    msg = new String(buffer, 0, packet.getLength());




                    index++;



                    if(channel.getmessege().contains("Ali")){
                        appendToPane(index,jTextPane1,channel.getmessege()+"\n",Color.BLUE);

                    }
                    if(channel.getmessege().contains("Saly")){
                        appendToPane(index,jTextPane1,channel.getmessege()+"\n",Color.PINK);

                    }
                    if(channel.getmessege().contains("Aws")){
                        appendToPane(index,jTextPane1,channel.getmessege()+"\n",Color.ORANGE);

                    }
                    if(channel.getmessege().contains("Adam")){
                        appendToPane(index,jTextPane1,channel.getmessege()+"\n",Color.MAGENTA);

                    }















                    String msg2= "Received from:IP="+packet.getAddress()+", Port ="+packet.getPort();
                    jTextField_status.setText(msg2);


                }
                catch (IOException e)
                {
                    break;
                }
            }
        }
        public  String getmessege(){


            return msg;
        }
        public void sendTo(InetSocketAddress address, String msg) throws IOException
        {
            byte[] buffer = msg.getBytes();

            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
            packet.setSocketAddress(address);

            socket.send(packet);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1_sendToAll;
    private javax.swing.JButton jButtonlogIn;
    private javax.swing.JButton jButtonlogout;
    private javax.swing.JButton jButtonsend;
    private javax.swing.JButton jButtontest;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea_messege;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField_Serverport;
    private javax.swing.JTextField jTextField_dest_ip;
    private javax.swing.JTextField jTextField_dest_port;
    private javax.swing.JTextField jTextField_name;
    private javax.swing.JTextField jTextField_sorce_ip;
    private javax.swing.JTextField jTextField_sorce_port;
    private javax.swing.JTextField jTextField_status;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
