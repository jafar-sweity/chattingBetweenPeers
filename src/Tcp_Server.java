
        import java.io.IOException;
        import java.io.ObjectInputStream;
        import java.io.ObjectOutputStream;
        import java.net.InetAddress;
        import java.net.ServerSocket;
        import java.net.Socket;
        import java.util.logging.Level;
        import java.util.logging.Logger;
        import javax.swing.DefaultListModel;
        import javax.swing.JList;
        import javax.swing.JOptionPane;

/**
 *
 * @author Eng_Obada Qasrawi
 */
public class Tcp_Server extends javax.swing.JFrame {

    /**
     * Creates new form TCPServer
     */
    DefaultListModel<String> model = new DefaultListModel<>();
    public Tcp_Server() {
        jList1 =new JList<>(model);
        initComponents();
        //place main frame in center
        super.pack();
        super.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextField_port = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setText("Start Listening");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "inter face 127.0.0.1", "inter face 127.0.0.1" }));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Port Number:");

        jTextField_port.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextField_port.setText("9876");
        jTextField_port.setToolTipText("");
        jTextField_port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_portActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Status: ");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jList1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jScrollPane2.setViewportView(jList1);

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField_port, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jButton1)
                                                        .addComponent(jLabel1)
                                                        .addComponent(jTextField_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(28, 28, 28)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField_portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_portActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_portActionPerformed


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new Thread() {
            @Override
            public void run() {     try {
                ServerSocket server;
                //socket server port on which it will listen
                int port = Integer.valueOf(jTextField_port.getText());
                server = new ServerSocket(port);
                jTextField2.setText("Address: "+ InetAddress.getLocalHost()+" Port:"+port);
                jTextField2.setEditable(false);
                //keep listens indefinitely until receives 'exit' call or program terminates
                while(true){
                    System.out.println("Waiting for the client request");
                    //creating socket and waiting for client connection
                    Socket socket = server.accept();
                    //read from socket to ObjectInputStream object
                    ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
                    //convert ObjectInputStream object to String
                    String message;

                    message = (String) ois.readObject();
                    if(message.contains("login")){
                        message =message.replace("login", "");
                        model.addElement(message);

                    }else if(message.contains("logout")){

                        message =message.replace("logout", "");
                        if( model.removeElement(message))
                            System.out.println("logout");
                    }
                    jList1.setModel(model);
                    System.out.println("Message Received: " + message);

                    //create ObjectOutputStream object
                    ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
                    //write object to Socket

                    oos.writeObject(model);
                    try {
                        online();
                    } catch (CloneNotSupportedException ex) {
                        Logger.getLogger(Tcp_Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //close resources
                    ois.close();
                    oos.close();
                    socket.close();
                    //terminate the server if client sends exit reque st
                    if(message.equalsIgnoreCase("exit")) break;
                }
                System.out.println("Shutting down Socket server!!");
                //close the ServerSocket object
                server.close();
            } catch (IOException ex) {
                Logger.getLogger(Tcp_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (ClassNotFoundException ex) {
                Logger.getLogger(Tcp_Server.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }.start();
    }//GEN-LAST:event_jButton1ActionPerformed
    public void online() throws CloneNotSupportedException{

        for(int i=0;i<model.getSize();i++){
            try {
                InetAddress host;

                host = InetAddress.getLocalHost();

                Socket socket = null;
                ObjectOutputStream oos = null;
                ObjectInputStream ois = null;


                String[] stringarry = model.get(i).split(":");
                String ports =stringarry[1];
                //  System.out.println(ports);
                DefaultListModel<String> modeltemp = new DefaultListModel<>();
                for(Object obj :model.toArray()){
                    modeltemp.addElement((String) obj);
                }

                modeltemp.removeElement(model.get(i));
                //establish socket connection to server
                socket = new Socket(host.getHostName(), Integer.valueOf(ports));

                //write to socket using ObjectOutputStream
                oos = new ObjectOutputStream(socket.getOutputStream());
                System.out.println("Sending request to Socket Server");
                // if(i==4)oos.writeObject("exit");
                oos.writeObject(modeltemp );
                //read the server response message
                ois = new ObjectInputStream(socket.getInputStream());
                String message;

                modeltemp =  (DefaultListModel<String>) ois.readObject();
                // login = true;
                //  System.out.println("Message: " + message);
                //jList1.setModel(model);
                //close resources
                ois.close();
                oos.close();
                Thread.sleep(100);

            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(null, ex);
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex);
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, ex);
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tcp_Server().setVisible(true);
            }
        });


        // Variables declaration - do not modify
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField_port;
    // End of variables declaration//GEN-END:variables
}
